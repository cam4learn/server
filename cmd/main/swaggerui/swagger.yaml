openapi: 3.0.0
info:
  title: Cam4Learn
  version: 1.0.0 
  description: Backend part of project.
paths:
  /login:
    post:
      summary: "User login"
      description: ""
      requestBody:
        description: "User login data"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                password:
                  type: string
              example:
                login: sergey
                password: QWER123
      responses:
        400:
          description: "Missed field"
        401:
          description: "Wrong login or password"
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  JWT:
                    type: string
  /adminLogin:
    post:
      summary: "Admin login"
      description: ""
      requestBody:
        description: "Admin login data"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                password:
                  type: string
              example:
                login: Ricardo
                password: 1223SW
      responses:
        400:
          description: "Missed field"
        401:
          description: "Wrong login or password"
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  JWT:
                    type: string
    
  /api/getSubjects:
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Get list of all subjects"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectDataObject'
        401:
          description: Expired token
        403:
          description: "Invalid token"
         
  /api/lectors:
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Get list of all lectors"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LectorDataObject'
        401:
          description: Expired token
        403:
          description: "Invalid token"

  /api/getLectorSubjects:
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Get list of only lector's subjects"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectDataObject'
        401:
          description: Expired token
        403:
          description: "Invalid token"
                  


  /api/admin/addSubject:
    post:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Add subject"
      requestBody:
        description: "Subject data"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - lector
                - title
              properties:
                lector:
                  type: integer
                title:
                  type: string
              example:
                lector: 2
                title: awpz
      responses:
        400:
          description: "Missing field or invalid value of field"
        200:
          description: OK
        401:
          description: Expired token
        403:
          description: "Invalid token"

  /api/admin/deleteSubject:
    delete:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Delete subject"
      requestBody:
        description: "Subject's ID"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
              example:
                id: 2
      responses:
        400:
          description: "Missing field id in request"
        200:
          description: OK
        401:
          description: Expired token
        403:
          description: "Invalid token"

  /api/admin/getSubjects:
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Get list of all subjects"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectDataObject'
        401:
          description: Expired token
        403:
          description: "Invalid token"

  /api/admin/addLector:
    post:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Add lector"
      requestBody:
        description: "Lector's data"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lector'
              example:
                name: Antonio
                surname: Perdachelli
                login: ricardo
                password: 1234Wq
      responses:
        400:
          description: "Missing field or invalid value of field"
        200:
          description: OK
        401:
          description: Expired token
        403:
          description: "Invalid token"

  /api/admin/deleteLector:
    delete:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Delete Lector"
      requestBody:
        description: "Lector's ID"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
              example:
                id: 2
      responses:
        400:
          description: "Missing field `id` in request"
        200:
          description: OK
        401:
          description: Expired token
        403:
          description: "Invalid token"

  /api/admin/getLectors:
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Get list of all lectors"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LectorAdminDataObject'
        401:
          description: Expired token
        403:
          description: "Invalid token"

  /api/admin/changeLector:
    patch:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Change lector's info"
      requestBody:
        description: "Lector's data"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LectorEdit'
              example:
                id: 2
                name: Antonio
                surname: Puckacchi
                login: ricardo
                password: 
      responses:
        400:
          description: "Missing field or invalid value of field"
        403:
          description: "Invalid token"
        200:
          description: OK
        401:
          description: Expired token
  
  /api/admin/device:
    delete:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Delete Device"
      requestBody:
        description: "Devices's ID"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
              example:
                id: 2
      responses:
        400:
          description: "Missing field `id` in request"
        200:
          description: OK
        401:
          description: Expired token
        403:
          description: "Invalid token"
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Get list of all devices"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        401:
          description: Expired token
        403:
          description: "Invalid token"
    post:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Add device"
      requestBody:
        description: "Device's data"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceAdd'
              example:
                address: Antonio
                room: 104
      responses:
        400:
          description: "Missing field or invalid value of field"
        200:
          description: OK
        401:
          description: Expired token
        403:
          description: "Invalid token"     
    patch:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Change devices's info"
      requestBody:
        description: "Device's data"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceEdit'
              example:
                id: 2
                room: 104
                address: Puckacchi
      responses:
        400:
          description: "Missing field or invalid value of field"
        403:
          description: "Invalid token"
        200:
          description: OK
        401:
          description: Expired token


  /api/subjectStatisticJson:
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
        - in: query
          name: subjectId
          schema:
            type: integer
          example: 7
      summary: "Get statistic of subject"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecondExportStruct'                
        401:
          description: Expired token
        403:
          description: "Invalid token"
  /api/subjectStatisticCsv:
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
        - in: query
          name: subjectId
          schema:
            type: integer
          example: 7
      summary: "Get statistic of subject"
      responses:
        200:
          description: OK
          content:
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecondExportStruct'                  
        401:
          description: Expired token
        403:
          description: "Invalid token"
  /api/getSubjectsCsv:
    get:
      parameters:
        - in: header
          required:
            - JWT
          name: JWT
          schema:
            type: string
      summary: "Get list of all subjects"
      responses:
        200:
          description: OK
          content:
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectDataObject'
        401:
          description: Expired token
        403:
          description: "Invalid token"
components:
  schemas:
    SubjectDataObject:
      properties:
        id:
          type: integer
        title:
          type: string
        name:
          type: string
        surname:
          type: string
    Lector:
      properties:
        name:
          type: string
        surname:
          type: string
        login:
          type: string
        password:
          type: string
    LectorEdit:
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
        login:
          type: string
        password:
          type: string
    LectorDataObject:
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
    LectorAdminDataObject:
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
        login:
          type: string
    Device:
      properties:
        id:
          type: integer
        room:
          type: string
    DeviceAdd:
      properties:
        address:
          type: string
        room:
          type: string 
    DeviceEdit:
      properties:
        id:
          type: integer
        address:
          type: string
        room:
          type: string
    SecondExportAttendanceStruct:
      properties:
        surname:
          type: string
        group:
          type: string
        value:
          type: integer
        isPresent:
          type: boolean
    SecondExportStruct:
      properties:
        date:
          type: string
        subject:
          type: string
        attendanceList:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SecondExportAttendanceStruct' 